spring.application.name=tienda-online

# PostgreSQL DB config
spring.datasource.url=jdbc:postgresql://localhost:5432/tienda_online
spring.datasource.username=sa
spring.datasource.password= 12345

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Agregar dialecto explícitamente para PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect



# Otros (opcional)
spring.jpa.properties.hibernate.format_sql=true

# Kafka bootstrap server apuntando a tu Kafka en Docker
spring.kafka.bootstrap-servers=localhost:9092 

# Configuración del productor Kafka
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Configuración del consumidor Kafka
spring.kafka.consumer.group-id=grupo-clientes
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Para que JsonDeserializer confíe en todos los paquetes y pueda deserializar Client
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# Esta es la línea que faltaba:
spring.kafka.consumer.properties.spring.json.value.default.type=com.gmdhody.tiendaonline.domain.model.Client

# Topic Kafka donde enviar y escuchar clientes creados
kafka.topic.clientes_creados=clientes_creados

